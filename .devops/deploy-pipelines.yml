# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat

# Only manual activations are intended
trigger: none
pr: none

# variables setted on azdevops to avoid circular dependency warning
# $(DEFAULT_BRANCH)
# $(HEALTHCHECK_CONTAINER_SUBNET)
# $(HEALTHCHECK_ENDPOINT)
variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    DEPLOY_TYPE: $[variables['DEV_DEPLOY_TYPE']]
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    WEB_APP_NAME: $(DEV_WEB_APP_NAME)
    WEB_APP_RESOURCE_GROUP_NAME: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    HEALTHCHECK_CONTAINER_RESOURCE_GROUP_NAME: $(DEV_HEALTHCHECK_CONTAINER_RESOURCE_GROUP_NAME)
    HEALTHCHECK_CONTAINER_VNET: $(DEV_HEALTHCHECK_CONTAINER_VNET)
    poolImage: 'pagopa-dev-linux'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    DEPLOY_TYPE: $[variables['UAT_DEPLOY_TYPE']]
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    WEB_APP_NAME: $(UAT_WEB_APP_NAME)
    WEB_APP_RESOURCE_GROUP_NAME: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)
    HEALTHCHECK_CONTAINER_RESOURCE_GROUP_NAME: $(UAT_HEALTHCHECK_CONTAINER_RESOURCE_GROUP_NAME)
    HEALTHCHECK_CONTAINER_VNET: $(UAT_HEALTHCHECK_CONTAINER_VNET)
    poolImage: 'pagopa-uat-linux'

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v3.4.0
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: EchoDbg
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Print
        steps:
          - script: |
              echo "Debug..."
              echo ${{ variables['Build.SourceBranch'] }}
              echo ${{ variables.DEFAULT_BRANCH }} 
              echo $(DEFAULT_BRANCH)
            displayName: 'Print info'

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch $(DEFAULT_BRANCH)
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    # condition: or(
    #   eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH)),
    #   and(
    #   startsWith(variables['Build.SourceBranch'], 'refs/tags'),
    #   endsWith(variables['Build.SourceBranch'], '-RELEASE')
    #   )
    #   )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: '$(DEFAULT_BRANCH)'
              semver: '${{ parameters.SEMVER }}'
              gitEmail: '$(GIT_EMAIL)'
              gitUsername: '$(GIT_USERNAME)'
              gitHubConnection: '$(GITHUB_CONNECTION)'

      - job: skip_release
        condition: ne(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn build
            displayName: 'Build'

          # Copy application to
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                web.config
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !.devops/**/*
                !.prettierrc
                !.gitignore
                !README.md
                !jest.integration.js
                !test
                !tsconfig.json
                !tslint.json
                !yarn.lock
                !Dangerfile.js
                !CODEOWNERS
                !Dockerfile
                !preview.hbs
                !.auto-changelog.json
                !api_pagopa.yaml
                !__*/**/*
            displayName: 'Copy deploy files'

          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  # Deploy on K8s with Helm
  - stage: Deploy
    condition: succeeded()
    dependsOn:
      - Release
    variables:
      deploy_version: $[ stageDependencies.Release.make_release.outputs['next_version.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true

                - script: |
                    git checkout $(sourceBranch)
                  displayName: Checkout and update branch

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: $(nameSpace)
                    APP_NAME: $(imageRepository)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
