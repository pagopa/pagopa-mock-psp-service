/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { stNoticeNumber_type_pafn } from "./stNoticeNumber_type_pafn";
import { stFiscalCodePA_type_pafn } from "./stFiscalCodePA_type_pafn";
import { stOutcome_type_pafn } from "./stOutcome_type_pafn";
import { stText35_type_pafn } from "./stText35_type_pafn";
import { stAmount_type_pafn } from "./stAmount_type_pafn";
import { stText140_type_pafn } from "./stText140_type_pafn";
import { ctSubject_type_pafn } from "./ctSubject_type_pafn";
import { ctTransferListPA_type_pafn } from "./ctTransferListPA_type_pafn";
import { stText70_type_pafn } from "./stText70_type_pafn";
import { stText20_type_pafn } from "./stText20_type_pafn";
import { stISODateTime_type_pafn } from "./stISODateTime_type_pafn";
import { stISODate_type_pafn } from "./stISODate_type_pafn";
import { ctMetadata_type_pafn } from "./ctMetadata_type_pafn";
import * as t from "io-ts";

/**
 * Its contains all receipt information :
 *
 * **identifier section**
 * - `outcome` : result of receipt **OK** / **KO**
 * - `receiptId` : unique identifier of receipt (assigned by pagoPa) it contains `paymentToken` present in to `activatePaymentNotice` response
 * - `noticeNumber` : notice number
 * - `fiscalCode` : Tax code of the public administration
 *
 * **PA data**
 * - `creditorReferenceId` : **IUV** _Identificativo Univoco Versamento_
 * - `paymentAmount` : amount
 * - `description` :
 * - `companyName` : Public Administration full name
 * - `officeName` Public Administration Department Name
 * - `debtor` : debtor subject identifier
 * - `transferList` : the list of transfers
 * - `metadata` : info received in to `paGetPaymentRes`
 *
 * **PSP data**
 * - `idPSP` : PSP Identifier, it has been assigned from pagoPA.
 * - `pspFiscalCode` : PSP' fiscal code
 * - `pspPartitaIVA` : PSP' _Partita IVA_
 * - `PSPCompanyName` : PSP full name
 * - `idChannel` : Channel Identifier, it identifies a payment service category and through which the transaction is carried out.
 * - `channelDescription` : Channel Identifier description
 * - `payer` : who made the payment
 * - `paymentMethod` : Method of the payment , i.e. `cash`, `creditCard`, `bancomat` or `other`
 * - `fee` : PSP's fee applied
 * - `paymentDateTime` : payment execution date by the user
 * - `applicationDate` : application date, payment date on the PSP side
 * - `transferDate` : transfer date
 */

// required attributes
const ctReceipt_type_pafnR = t.interface({
  receiptId: t.string,

  noticeNumber: stNoticeNumber_type_pafn,

  fiscalCode: stFiscalCodePA_type_pafn,

  outcome: stOutcome_type_pafn,

  creditorReferenceId: stText35_type_pafn,

  paymentAmount: stAmount_type_pafn,

  description: stText140_type_pafn,

  companyName: stText140_type_pafn,

  debtor: ctSubject_type_pafn,

  transferList: ctTransferListPA_type_pafn,

  idPSP: stText35_type_pafn,

  PSPCompanyName: stText35_type_pafn,

  idChannel: stText35_type_pafn,

  channelDescription: stText35_type_pafn
});

// optional attributes
const ctReceipt_type_pafnO = t.partial({
  officeName: stText140_type_pafn,

  pspFiscalCode: stText70_type_pafn,

  pspPartitaIVA: stText20_type_pafn,

  payer: ctSubject_type_pafn,

  paymentMethod: stText35_type_pafn,

  fee: stAmount_type_pafn,

  paymentDateTime: stISODateTime_type_pafn,

  applicationDate: stISODate_type_pafn,

  transferDate: stISODate_type_pafn,

  metadata: ctMetadata_type_pafn
});

export const ctReceipt_type_pafn = t.intersection(
  [ctReceipt_type_pafnR, ctReceipt_type_pafnO],
  "ctReceipt_type_pafn"
);

export type ctReceipt_type_pafn = t.TypeOf<typeof ctReceipt_type_pafn>;
